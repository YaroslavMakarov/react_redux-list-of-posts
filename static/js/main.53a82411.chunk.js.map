{"version":3,"sources":["store/index.ts","helpers/helpers.ts","helpers/api.ts","components/User/User.tsx","components/Post/Post.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["setLoading","loadingStatus","type","initialState","posts","inputValue","debounceInputValue","filteredPosts","state","filter","post","title","body","toLowerCase","includes","trim","store","createStore","action","id","postId","map","comments","comment","commentId","ensure","argument","message","undefined","TypeError","fetchData","url","fetch","then","response","json","users","postsFromServer","Promise","all","result","user","find","userId","User","name","username","email","address","className","street","suite","city","zipcode","href","Post","dispatch","useDispatch","onClick","Comment","CommentsList","key","PostList","App","preparePosts","useSelector","isLoading","useCallback","debounce","inputParam","changeDebounceInputValue","length","value","onChange","target","changeInputValue","data","setPosts","Root","ReactDOM","render","document","getElementById"],"mappings":"qYAwCaA,EAAa,SAACC,GAAD,MACxB,CACEC,KAxCgB,cAyChBD,kBA8CEE,EAA6B,CACjCC,MAAO,GACPC,WAAY,GACZC,mBAAoB,GACpBL,eAAe,GAwCJM,EAAgB,SAACC,GAC5B,OAAKA,EAAMH,WAIJ,YAAIG,EAAMJ,OAAOK,QAAO,SAACC,GAG9B,OAFgBA,EAAKC,MAAQD,EAAKE,MAAMC,cAE1BC,SAASN,EAAMF,mBAAmBS,WANzCP,EAAMJ,OAYFY,EAFDC,aAjDO,WAA+C,IAA9CT,EAA6C,uDAArCL,EAAce,EAAuB,uCACjE,OAAQA,EAAOhB,MACb,IAhGgB,cAgGE,OAAO,2BACpBM,GADa,IAEhBR,WAAYkB,EAAOjB,gBAErB,IAnGc,YAmGE,OAAO,2BAClBO,GADW,IAEdJ,MAAOc,EAAOd,QAEhB,IAtGgB,cAsGE,OAAO,2BACpBI,GADa,IAEhBH,WAAYa,EAAOb,aAErB,IAzG6B,2BAyGE,OAAO,2BACjCG,GAD0B,IAE7BF,mBAAoBY,EAAOZ,qBAE7B,IA5GgB,cA4GE,OAAO,2BACpBE,GADa,IAEhBJ,MAAO,YAAII,EAAMJ,OAAOK,QAAO,SAAAC,GAAI,OAAIA,EAAKS,KAAOD,EAAOE,YAE5D,IA/GmB,iBA+GE,OAAO,2BACvBZ,GADgB,IAEnBJ,MAAO,YAAII,EAAMJ,OAAOiB,KAAI,SAAAX,GAAI,kCAEzBA,GAFyB,IAG5BY,SAAUZ,EAAKY,SAASb,QAAO,SAAAc,GAAO,OACpCA,EAAQJ,KAAOD,EAAOM,oBAK9B,QAAS,OAAOhB,M,MCjIb,SAASiB,EACdC,GAEI,IADJC,EACG,uDADO,uCAEV,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,ECET,IAEMI,EAAY,SAAIC,GACpB,OAAOC,MAHO,kEAGSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAGzB/B,EAAyB0B,EAAU,cAEnCM,EAAyBN,EAAU,cAEnCR,EAA+BQ,EAAU,iBAElCO,EAAkBC,QAAQC,IAAI,CAACnC,EAAOgC,EAAOd,IACvDW,MAAK,SAAAO,GACJ,OAAOA,EAAO,GAAGnB,KAAI,SAAAX,GAAI,kCAElBA,GAFkB,IAGrB+B,KAAMhB,EAAOe,EAAO,GAAGE,MAAK,SAAAD,GAAI,OAAIA,EAAKtB,KAAOT,EAAKiC,WACrDrB,SAAUkB,EAAO,GAAG/B,QAAO,SAAAc,GAAO,OAAIA,EAAQH,SAAWV,EAAKS,cCYvDyB,G,MA/Be,SAAC,GAExB,IADLC,EACI,EADJA,KAAMC,EACF,EADEA,SAAUC,EACZ,EADYA,MAAOC,EACnB,EADmBA,QAEvB,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,cAAd,mBACeH,IAEf,uBAAGG,UAAU,kBACX,0BAAMA,UAAU,uBACbJ,GAEH,6BACA,0BAAMI,UAAU,uBAAhB,UACMD,EAAQE,OADd,YACwBF,EAAQG,QAEhC,6BACA,0BAAMF,UAAU,uBAAhB,UACMD,EAAQI,KADd,YACsBJ,EAAQK,UAE9B,6BACA,0BAAMJ,UAAU,uBACd,uBAAGK,KAAI,iBAAYP,IAChBA,QCLEQ,G,MAjBe,SAAC,GAAyB,IAAvB5C,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMO,EAAS,EAATA,GACtCqC,EAAWC,cAEjB,OACE,6BAASR,UAAU,QACjB,wBAAIA,UAAU,gBAAgBtC,GAC9B,uBAAGsC,UAAU,cAAcrC,GAC3B,4BACEV,KAAK,SACLwD,QAAS,kBAAMF,EJiDrB,CACEtD,KAhEgB,cAiEhBkB,OInDuCD,MAFrC,kBC+BSwC,G,MArCkB,SAAC,GAE3B,IADLd,EACI,EADJA,KAAME,EACF,EADEA,MAAOnC,EACT,EADSA,KAAMO,EACf,EADeA,GAEbqC,EAAWC,cAEjB,OACE,oCACE,yBAAKR,UAAU,WACb,yBAAKA,UAAU,sCACb,+CACC,IACCJ,EACF,8BAEF,yBAAKI,UAAU,uCACb,0CACA,uBACEK,KAAI,iBAAYP,GAChBE,UAAU,4CAETF,KAIP,yBAAKE,UAAU,sCACZrC,GAEH,4BACEV,KAAK,SACLwD,QAAS,kBAAMF,ELmCrB,CACEtD,KAtEmB,iBAuEnBsB,UKrC0CL,MAFxC,qBCZSyC,G,MAnBuB,SAAC,GAAkB,IAAhBtC,EAAe,EAAfA,SACvC,OACE,iCACE,wBAAI2B,UAAU,eACX3B,EAASD,KAAI,SAAAE,GAAO,OACnB,wBAAIsC,IAAKtC,EAAQJ,GAAI8B,UAAU,qBAC7B,kBAAC,EAAD,CACEJ,KAAMtB,EAAQsB,KACdE,MAAOxB,EAAQwB,MACfnC,KAAMW,EAAQX,KACdO,GAAII,EAAQJ,aCgBX2C,G,MAxBmB,SAAC,GAAe,IAAb1D,EAAY,EAAZA,MAEnC,OAEE,wBAAI6C,UAAU,YACX7C,EAAMiB,KAAI,SAACX,GAAD,OACT,yBAAKmD,IAAKnD,EAAKS,GAAI8B,UAAU,qBAC3B,wBAAIA,UAAU,kBACZ,kBAAC,EACKvC,EAAK+B,MAEX,kBAAC,EACK/B,IAGR,kBAAC,EAAD,CACEY,SAAUZ,EAAKY,kBC8CZyC,EAvDH,WACV,IAAMP,EAAWC,cACXO,EAAeC,YAAY1D,GAC3BH,EAAQ6D,aAAY,SAACzD,GAAD,OAAyBA,EAAMJ,SACnDC,EAAa4D,aAAY,SAACzD,GAAD,OAAyBA,EAAMH,cACxD6D,EAAYD,aAAY,SAACzD,GAAD,OAAyBA,EAAMP,iBAevDK,EAAqB6D,sBAAYC,KAJZ,SAACC,GAC1Bb,ERyBoC,SACtClD,GADsC,MAGtC,CACEJ,KA1D6B,2BA2D7BI,sBQ9BSgE,CAAyBD,MAGgC,KAAO,IAE3E,OACE,yBAAKpB,UAAU,OACb,qDACC7C,EAAMmE,OAAS,GAEd,2BACErE,KAAK,OACL+C,UAAU,aACVuB,MAAOnE,EACPoE,SACE,YAAiB,IAAdC,EAAa,EAAbA,OACDlB,EREkB,SAACnD,GAAD,MAC9B,CACEH,KAlDgB,cAmDhBG,cQLmBsE,CAAiBD,EAAOF,QACjClE,EAAmBoE,EAAOF,UAKlC,kBAAC,EAAD,CAAUpE,MAAO4D,IACC,IAAjB5D,EAAMmE,QAEL,4BACErE,KAAK,SACL+C,UAAU,cACVS,QAAS,kBArCfF,EAASxD,GAAW,SACpBqC,EAAgBJ,MAAK,SAAA2C,GACnBpB,EAASxD,GAAW,IAEpBwD,ERiBkB,SAACpD,GAAD,MACtB,CACEF,KA7Cc,YA8CdE,SQpBWyE,CAASD,SAmCbV,EAAY,aAAe,eC1DhCY,EAAO,kBACX,kBAAC,IAAD,CAAU9D,MAAOA,GACf,kBAAC,EAAD,QAIJ+D,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.53a82411.chunk.js","sourcesContent":["import { createStore, Action } from 'redux';\n\nconst SET_LOADING = 'SET_LOADING';\nconst SET_POSTS = 'SET_POSTS';\nconst INPUT_VALUE = 'INPUT_VALUE';\nconst SET_DEBOUNCE_INPUT_VALUE = 'SET_DEBOUNCE_INPUT_VALUE';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\ntype SetLoading = Action<typeof SET_LOADING> & {\n  loadingStatus: boolean;\n};\n\ntype SetPosts = Action<typeof SET_POSTS> & {\n  posts: PostWithUserAndComment[];\n};\n\ntype ChangeInputValue = Action<typeof INPUT_VALUE> & {\n  inputValue: string;\n};\n\ntype ChangeDebounceInputValue = Action<typeof SET_DEBOUNCE_INPUT_VALUE> & {\n  debounceInputValue: string;\n};\n\ntype DeletePost = Action<typeof DELETE_POST> & {\n  postId: number;\n};\n\ntype DeleteComment = Action<typeof DELETE_COMMENT> & {\n  commentId: number;\n};\n\nexport type AllActions = SetLoading\n| SetPosts\n| ChangeInputValue\n| ChangeDebounceInputValue\n| DeletePost\n| DeleteComment;\n\nexport const setLoading = (loadingStatus: boolean): SetLoading => (\n  {\n    type: SET_LOADING,\n    loadingStatus,\n  }\n);\nexport const setPosts = (posts: PostWithUserAndComment[]): SetPosts => (\n  {\n    type: SET_POSTS,\n    posts,\n  }\n);\nexport const changeInputValue = (inputValue: string): ChangeInputValue => (\n  {\n    type: INPUT_VALUE,\n    inputValue,\n  }\n);\n\nexport const changeDebounceInputValue = (\n  debounceInputValue: string,\n): ChangeDebounceInputValue => (\n  {\n    type: SET_DEBOUNCE_INPUT_VALUE,\n    debounceInputValue,\n  }\n);\n\nexport const deletePost = (postId: number): DeletePost => (\n  {\n    type: DELETE_POST,\n    postId,\n  }\n);\n\nexport const deleteComment = (commentId: number): DeleteComment => (\n  {\n    type: DELETE_COMMENT,\n    commentId,\n  }\n)\n\nexport type InitialState = {\n  posts: PostWithUserAndComment[];\n  inputValue: string;\n  debounceInputValue: string;\n  loadingStatus: boolean;\n};\n\nconst initialState: InitialState = {\n  posts: [],\n  inputValue: '',\n  debounceInputValue: '',\n  loadingStatus: false,\n};\n\nconst postsReducer = (state = initialState, action: AllActions) => {\n  switch (action.type) {\n    case SET_LOADING: return {\n      ...state,\n      setLoading: action.loadingStatus,\n    };\n    case SET_POSTS: return {\n      ...state,\n      posts: action.posts,\n    };\n    case INPUT_VALUE: return {\n      ...state,\n      inputValue: action.inputValue,\n    };\n    case SET_DEBOUNCE_INPUT_VALUE: return {\n      ...state,\n      debounceInputValue: action.debounceInputValue,\n    };\n    case DELETE_POST: return {\n      ...state,\n      posts: [...state.posts].filter(post => post.id !== action.postId),\n    };\n    case DELETE_COMMENT: return {\n      ...state,\n      posts: [...state.posts].map(post => (\n        {\n          ...post,\n          comments: post.comments.filter(comment => (\n            comment.id !== action.commentId\n          )),\n        }\n      )),\n    };\n    default: return state;\n  }\n};\n\nexport const filteredPosts = (state: InitialState): PostWithUserAndComment[] => {\n  if (!state.inputValue) {\n    return state.posts;\n  }\n\n  return [...state.posts].filter((post) => {\n    const string = (post.title + post.body).toLowerCase();\n\n    return string.includes(state.debounceInputValue.trim());\n  });\n};\n\nconst store = createStore(postsReducer);\n\nexport default store;\n","export function ensure<T>(\n  argument: T | undefined | null,\n  message = 'This value was promised to be there.',\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","// export function fetchMessage(): Promise<string> {\n// //   // this is just a fake promise resolved in 2 seconds\n// //   return new Promise(resolve => {\n// //     setTimeout(() => {\n// //       resolve('Message from server');\n// //     }, 2000);\n// //   });\n// // }\nimport { ensure } from './helpers';\n\nconst API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nconst fetchData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nconst posts: Promise<Post[]> = fetchData('posts.json');\n\nconst users: Promise<User[]> = fetchData('users.json');\n\nconst comments: Promise<Comment[]> = fetchData('comments.json');\n\nexport const postsFromServer = Promise.all([posts, users, comments])\n  .then(result => {\n    return result[0].map(post => (\n      {\n        ...post,\n        user: ensure(result[1].find(user => user.id === post.userId)),\n        comments: result[2].filter(comment => comment.postId === post.id),\n      }\n    ));\n  });\n","import React from 'react';\nimport './User.scss';\n\ntype Props = {\n  name: string;\n  username: string;\n  email: string;\n  address: Address;\n};\n\nconst User: React.FC<Props> = ({\n  name, username, email, address,\n}) => {\n  return (\n    <div className=\"user\">\n      <h2 className=\"user__nick\">\n        {`Post by: ${username}`}\n      </h2>\n      <p className=\"user__contacts\">\n        <span className=\"user__contacts-item\">\n          {name}\n        </span>\n        <br />\n        <span className=\"user__contacts-item\">\n          {`${address.street} ${address.suite}`}\n        </span>\n        <br />\n        <span className=\"user__contacts-item\">\n          {`${address.city} ${address.zipcode}`}\n        </span>\n        <br />\n        <span className=\"user__contacts-item\">\n          <a href={`mailto:${email}`}>\n            {email}\n          </a>\n        </span>\n      </p>\n    </div>\n  );\n};\n\nexport default User;\n","import React, { Dispatch } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AllActions, deletePost } from '../../store';\nimport './Post.scss';\n\ntype Props = {\n  title: string;\n  body: string;\n  id: number;\n};\n\nconst Post: React.FC<Props> = ({ title, body, id }) => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n\n  return (\n    <article className=\"post\">\n      <h2 className=\"post__header\">{title}</h2>\n      <p className=\"post__text\">{body}</p>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(deletePost(id))}\n      >\n        delete post\n      </button>\n    </article>\n  );\n};\n\nexport default Post;\n","import React, { Dispatch } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AllActions, deleteComment } from '../../store';\nimport './Comment.scss';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n  id: number;\n};\n\nconst Comment: React.FC<Props> = ({\n  name, email, body, id,\n}) => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n\n  return (\n    <>\n      <div className=\"comment\">\n        <div className=\"comment__name comment__indentation\">\n          <strong>Comment by:</strong>\n          {' '}\n          { name }\n          <br />\n        </div>\n        <div className=\"comment__email comment__indentation\">\n          <strong>Email:</strong>\n          <a\n            href={`mailto:${email}`}\n            className=\"comment__email-link comment__indentation\"\n          >\n            {email}\n          </a>\n        </div>\n      </div>\n      <div className=\"comment__text comment__indentation\">\n        {body}\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(deleteComment(id))}\n      >\n        delete comment\n      </button>\n    </>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from '../Comment/Comment';\nimport './CommentList.scss';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentsList: React.FC<Props> = ({ comments }) => {\n  return (\n    <section>\n      <ul className=\"commentList\">\n        {comments.map(comment => (\n          <li key={comment.id} className=\"commentList__item\">\n            <Comment\n              name={comment.name}\n              email={comment.email}\n              body={comment.body}\n              id={comment.id}\n            />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport User from '../User/User';\nimport Post from '../Post/Post';\nimport CommentsList from '../CommentList/CommentList';\nimport './Postlist.scss';\n\ntype Props = {\n  posts: PostWithUserAndComment[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => {\n\n  return (\n\n    <ul className=\"postList\">\n      {posts.map((post: PostWithUserAndComment) => (\n        <div key={post.id} className=\"postList__wrapper\">\n          <li className=\"postList__item\">\n            <User\n              {...post.user}\n            />\n            <Post\n              {...post}\n            />\n          </li>\n          <CommentsList\n            comments={post.comments}\n          />\n        </div>\n      ))}\n    </ul>\n  );\n};\n\nexport default PostList;\n","import React, { Dispatch, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport {\n  setLoading,\n  setPosts,\n  changeInputValue,\n  filteredPosts,\n  changeDebounceInputValue,\n  AllActions,\n  InitialState,\n} from './store/index';\nimport './App.scss';\nimport { postsFromServer } from './helpers/api';\nimport PostList from './components/PostList/PostList';\n\n\nconst App = () => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n  const preparePosts = useSelector(filteredPosts);\n  const posts = useSelector((state: InitialState) => state.posts);\n  const inputValue = useSelector((state: InitialState) => state.inputValue);\n  const isLoading = useSelector((state: InitialState) => state.loadingStatus);\n\n  const fetchData = (): void => {\n    dispatch(setLoading(true));\n    postsFromServer.then(data => {\n      dispatch(setLoading(false));\n\n      dispatch(setPosts(data));\n    });\n  };\n\n  const dispatchInputValue = (inputParam: string) => {\n    dispatch(changeDebounceInputValue(inputParam));\n  };\n\n  const debounceInputValue = useCallback(debounce(dispatchInputValue, 1000), []);\n\n  return (\n    <div className=\"app\">\n      <h1>Dynamic list of posts</h1>\n      {posts.length > 1\n      && (\n        <input\n          type=\"text\"\n          className=\"app__input\"\n          value={inputValue}\n          onChange={\n            ({ target }) => {\n              dispatch(changeInputValue(target.value));\n              debounceInputValue(target.value);\n            }\n          }\n        />\n      )}\n      <PostList posts={preparePosts} />\n      {posts.length === 0\n      && (\n        <button\n          type=\"button\"\n          className=\"app__button\"\n          onClick={() => fetchData()}\n        >\n          {isLoading ? 'Loading...' : 'Get Posts'}\n        </button>\n      )}\n    </div>\n  );\n};\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}